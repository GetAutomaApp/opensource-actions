name: 'SwiftTesting'
description: 'A GitHub Action that runs SwiftTesting & Composes if need-be'
branding:
  icon: 'code'
  color: 'orange'

inputs:
  working-directory:
    description: 'Directory to run SwiftLint in'
    required: false
    default: '.'
  compose:
    description: 'Whether or not to compose if a compose-file exists in desired path'
    required: false
    default: 'true'
  compose-file:
    description: 'If the compose file isnt in the working-directory set this path as an override (relative to working-directory)'
    required: false
    default: ''

outputs:
  exit-code:
    description: 'The exit code from the Swift test run'

runs:
  using: 'composite'
  steps:
    - name: Install Docker (Standalone Binary)
      shell: bash
      run: |
        set -euo pipefail

        DOCKER_VERSION="28.1.0"
        ARCH="x86_64"
        BASE_URL="https://download.docker.com/linux/static/stable"

        echo "Downloading Docker $DOCKER_VERSION..."
        curl -fsSL "$BASE_URL/$ARCH/docker-${DOCKER_VERSION}.tgz" -o docker.tgz
        tar xzvf docker.tgz
        sudo mv docker/* /usr/local/bin/
        docker --version

    - name: Install Docker Compose v2 (Plugin Method)
      shell: bash
      run: |
        set -euo pipefail

        COMPOSE_VERSION="v2.35.0"
        DEST="$HOME/.docker/cli-plugins"

        echo "Installing Docker Compose $COMPOSE_VERSION into $DEST..."
        mkdir -p "$DEST"
        curl -fsSL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64" \
          -o "$DEST/docker-compose"
        chmod +x "$DEST/docker-compose"

        echo "$HOME/.docker/cli-plugins" >> "$GITHUB_PATH"
        docker compose version

    - name: Run Tests
      shell: bash
      run: |
        set -euo pipefail

        echo "Preparing to package in working directory: '${{ inputs.working-directory }}'"
        cd "${{ inputs.working-directory }}"

        if [[ "${{ inputs.compose }}" == "true" ]]; then
          echo "Composing with Docker"
          if [[ -z "${{ inputs.compose-file }}" ]]; then
            echo "Using default docker-compose.yml"
            docker compose up -d
          else
            echo "Using overridden compose file: '${{ inputs.compose-file }}'"
            docker compose -f "${{ inputs.compose-file }}" up -d
          fi
        else
          echo "Not using Docker Compose"
        fi

        echo "Running Swift Tests"
        swift test

        echo "exit-code=$?" >> "$GITHUB_OUTPUT"
