name: "SwiftTesting"
description: "A GitHub Action that runs SwiftTesting & Composes if need-be"
branding:
  icon: "code"
  color: "orange"

inputs:
  working-directory:
    description: "Directory to run SwiftTesting in"
    required: false
    default: "."
  compose:
    description: "Whether or not to compose if a compose_file exists in desired path"
    required: false
    default: "true"
  compose_file:
    description: "If the compose file isnt in the working-directory set this path as an override (relative to working-directory)"
    required: false
    default: ""
  swift_test_extra_args:
    description: "Extra arguments to run swift tests"
    required: false
    default: ""
  docker_compose_extra_args:
    description: "Extra arguments for docker-compose"
    required: false
    default: ""
  required_healthy_services_docker_compose:
    description: 'Array of docker-compose services that must be healthy before running tests'
    required: false
    default: '[]' # Expecting a JSON array of strings

outputs:
  exit-code:
    value: ${{ steps.run-tests.outputs.exit-code }}
    description: "The exit code from the Swift test run"

runs:
  using: "composite"
  steps:
    - name: Install Docker, Docker Compose
      shell: bash
      run: |
        set -euo pipefail

        echo "Detecting OS..."
        OS="$(uname -s | tr '[:upper:]' '[:lower:]')"

        if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
            echo "Both Docker and Docker Compose are installed"
        else
          if [[ "$OS" == "darwin" && ${{ inputs.compose }} == "true" ]]; then
            echo "macOS detected. Installing Docker, Compose, and Colima via Homebrew..."

            brew install docker docker-compose colima qemu

            mkdir -p ~/.docker/cli-plugins
            ln -sfn /usr/local/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose

            sudo curl -L -o /opt/homebrew/Cellar/lima/1.0.7/bin/limactl https://github.com/mikekazakov/lima-nohvf/raw/master/limactl && sudo chmod +x /opt/homebrew/Cellar/lima/1.0.7/bin/limactl
            colima start --network-address --arch arm64 --vm-type=qemu

            echo "Ensuring Docker CLI is available..."
            docker --version

            echo "Ensuring Docker Compose is available..."
            docker-compose version

          elif [[ "$OS" == "linux" && ${{ inputs.compose }} == "true" ]]; then
            echo "Linux detected. Installing Docker and Docker Compose (Standalone)..."

            DOCKER_VERSION="28.1.0"
            COMPOSE_VERSION="v2.35.0"
            ARCH="x86_64"
            BASE_URL="https://download.docker.com/linux/static/stable"
            DEST="$HOME/.docker/cli-plugins"

            echo "Downloading Docker $DOCKER_VERSION..."
            curl -fsSL "$BASE_URL/$ARCH/docker-${DOCKER_VERSION}.tgz" -o docker.tgz
            tar xzvf docker.tgz
            sudo mv docker/* /usr/local/bin/
            docker --version

            echo "Installing Docker Compose $COMPOSE_VERSION into $DEST..."
            mkdir -p "$DEST"
            curl -fsSL "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-${ARCH}" \
              -o "$DEST/docker-compose"
            chmod +x "$DEST/docker-compose"

            echo "$DEST" >> "$GITHUB_PATH"
            docker compose version
          fi
        fi

    - name: Wait for required services to be healthy
      shell: bash
      run: |
        set -euo pipefail

        COMPOSE_ENABLED="${{ inputs.compose }}"
        WORKDIR="${{ inputs.working-directory }}"
        COMPOSE_FILE_OVERRIDE="${{ inputs.compose_file }}"
        EXTRA_ARGS="${{ inputs.docker_compose_extra_args }}"
        REQUIRED_SERVICES='${{ inputs.required_healthy_services_docker_compose }}'

        if [[ "$COMPOSE_ENABLED" == "false" ]]; then
          echo "Skipping docker-compose setup as it's disabled."
          exit 0
        fi

        cd "$WORKDIR"

        echo "Parsing required services from input: $REQUIRED_SERVICES"
        services=$(echo "$REQUIRED_SERVICES" | jq -r '.[]')

        if [[ -n "$COMPOSE_FILE_OVERRIDE" && -f "$COMPOSE_FILE_OVERRIDE" ]]; then
          echo "Using overridden compose file: '$COMPOSE_FILE_OVERRIDE'"
          docker-compose -f "$COMPOSE_FILE_OVERRIDE" up -d $EXTRA_ARGS
        else
          echo "No valid override compose file found or not provided. Using default docker-compose.yml"
          docker-compose up -d $EXTRA_ARGS
        fi

        for service in $services; do
          echo "⏳ Waiting for service '$service' to be healthy..."
          while true; do
            container_id=$(docker-compose ps -q "$service")
            if [ -z "$container_id" ]; then
              echo "❌ Service '$service' not found or not running."
              exit 1
            fi

            health_status=$(docker inspect -f '{{.State.Health.Status}}' "$container_id")

            if [ "$health_status" == "healthy" ]; then
              echo "✅ $service is healthy."
              break
            else
              echo "⏳ $service health: $health_status"
              sleep 1
            fi
          done
        done

    - name: Run Tests
      id: run-tests
      shell: bash
      run: |
        echo "Running Swift Tests"
        cd "$WORKDIR"
        ls .build
        if swift test ${{ inputs.swift_test_extra_args }}; then
          echo "Swift tests passed."
          echo "exit-code=0" >> "$GITHUB_OUTPUT"
        else
          echo "Swift tests failed!"
          echo "exit-code=1" >> "$GITHUB_OUTPUT"
          exit 1
        fi
